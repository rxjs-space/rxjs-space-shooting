import { Observable, TestScheduler } from 'rxjs';
import { HeroShip, config } from '../_shared';
import { heroShipMove$Fac } from './hero-ship';


/*

head$:   a---b
         |   |
         |   |
sub1$:   --d-|
             |
sub2$:       --e-f
result$: c-d---e-f

c is emitted by the startWith operator
sub1$ and sub2$ are generated by the interval operator

*/

describe('heroShip', () => {
  it('should move according to movemouse events', () => {
    const scheduler = new TestScheduler((a, b) => expect(a).toEqual(b));
    const heroShipInit: HeroShip = Object.assign({
      x: 200,
      y: 360,
      size: 0,
      color: 'any',
      stride: {
        x: 1,
        y: 0
      },
      pointingUp: true
    })
    const values = {
      a: {offsetX: 300},
      b: {offsetX: 100},
      c: Object.assign({}, heroShipInit),
      d: Object.assign({}, heroShipInit, {x: 201}),
      e: Object.assign({}, heroShipInit, {x: 200}),
      f: Object.assign({}, heroShipInit, {x: 199})
    }
    const head$ = scheduler.createColdObservable('a---b', values)
    const expectedStream = 'c-d---e-(f|)'
    const actual$ = heroShipMove$Fac(heroShipInit, head$, scheduler).take(4)
    scheduler.expectObservable(actual$).toBe(expectedStream, values)
    scheduler.flush();
  })
})
