import { Observable } from 'rxjs/Observable';
import { Subscription } from 'rxjs/Subscription';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/observable/combineLatest';
import {
  Game, Star,
  HeroShip, HeroMissile, 
  EnemyShip, EnemyMissile
} from '../_shared';
import { stars$Fac } from './stars';
import { heroShip$Fac } from './hero-ship';
import { heroMissiles$Fac } from './hero-missiles';
import { enemyShips$Fac } from './enemy-ships';
import { enemyMissiles$Fac } from './enemy-missiles';
import { testGameCollide } from './_test-collide';

const projectFuncFac = (game: Game) => {
  return (
    stars: Star[], 
    heroShip: HeroShip,
    heroMissiles: HeroMissile[],
    enemyShips: EnemyShip[],
    enemyMissiles: EnemyMissile[]
  ) => {
    Object.assign(game, {
      stars,
      heroShip,
      heroMissiles,
      enemyShips,
      enemyMissiles
    });
    testGameCollide(game);
    return game;
  }
}


/*
  before adding the _subscriptions property on game object,
  when generating, for example, heroMissiles$, we push in heroShip$ observable
  as the 2nd parameter. And when the final observable (generated by Observable.combinelatest)
  is subscribed, the heroShips$ is subscribed twice, one for heroShip$ and another for 
  heroMissiles$.
  We can introduce a subject to enable muticast by `Observable.subscribe(Subject)`.
  But if we do that, each time we run gameRun$Fac, a subcription will be generated,
  and when we run gamePause$Fac, the subscriptions above mentioned will not be unsubscribed.
  There will be subscriptions as many as the times we pause-resumed.
  With game._subsctiptions, we keep track of all the subject subscriptions and we can update the 
  subsciptions in gameRun$Fac and unsubscribe in gamePause$Fac.
*/

export const gameRun$Fac = (game: Game): Observable<Game> => {
  const stars$ = stars$Fac(game.stars);

  const heroShip$$ = new BehaviorSubject(game.heroShip);
  const heroShipSubscription: Subscription = heroShip$Fac(game.heroShip).subscribe(heroShip$$);
  game._subscriptions.push(heroShipSubscription);
  const heroMissiles$ = heroMissiles$Fac(game.heroMissiles, heroShip$$);

  const enemyShips$$ = new BehaviorSubject(game.enemyShips);
  const enemyShipsSubscription: Subscription = enemyShips$Fac(game.enemyShips).subscribe(enemyShips$$);
  game._subscriptions.push(enemyShipsSubscription);
  const enemyMissiles$ = enemyMissiles$Fac(game.enemyMissiles, enemyShips$$)

  return Observable.combineLatest(
    stars$, 
    heroShip$$, 
    heroMissiles$,
    enemyShips$$,
    enemyMissiles$,
    projectFuncFac(game)
  )
}
